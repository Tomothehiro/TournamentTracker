<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA3Jk1ZtyXNWUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD//wAB2Zc0NtyYM5DbmDT925g0/dyYM5DZlzQ2//8AAQAAAAAAAAAAAAAAAAAA
        AAAAAAAA//8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2Js2IduY
        NK/VnDkSAAAAAAAAAADjjjkJ25k0etuYNNzbmDT/25g0/9uYNP/bmDT/25g0/9uYNP/bmDTc25k0euOO
        OQkAAAAAAAAAAN6bNxfbmTXM2ZYyPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADbmDS325g0/9yYNcLfn0AI25o1K9uZNNbbmDT/25g0/9uYNP/bmDT/25g0/9uYNP/bmDT/25g0/9uY
        NP/bmDT/25k01tuYNyrdmTMP25g0z9uYNP/alzTK//8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANiTMRrbmTTg25g0/9uYNLnbmDTt25g0/NyXNYLWmTMZ25g2OduYNe7bmDT/25g0/9yY
        NObbmTMy1pkzGduYM4HbmDT725g07duYNMnbmDT/3Jgz39mXORsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANuaNSvbmDTv25g0/9uYNPbamDRFAAAAAAAAAAAAAAAA25k0a9uY
        NP/bmDT/25c0XQAAAAAAAAAAAAAAANyZM0HbmDT725g0/9uXNOrYljQnAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2Zc0NtqYNLzbmDT/25g0/9uZM2kAAAAA3Zo2JtyZ
        NInbmDTS25g0/9uYNP/bmDPQ3Jg0it2YNyUAAAAA25gzlduYNP/bmDT/25g0wd2YNjQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADbmDPQ25g0/9uZNJ3bmDT+25g0/NqZ
        NKfbmDT625g0/9uYNP/bmDT/25g0/9uYNP/bmDT/25g0+tuXNMDbmDT/25g0+NyYNYPbmDT+25gz1QAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuYNOzbmDT/2pk0hNuZ
        NH/bmDT/25g0/9uYNP3bmDW425g079uSNw7Roi4L25YyONuZNJPbmDT425g0/9uYNP/bmDVc2pkzfduY
        NP/bmDTtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25g0+tqZ
        M30AAAAA3Jg0l9uYNP/bmDTt2pkzN9uXNHHbmDScAAAAAAAAAAAAAAAAAAAAANqaNTDcmDTm25g0/9uZ
        NJMAAAAA25g1eduYNPkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADbmTRwAAAAAN2ZMy3bmDT+25g0+9mXNDYAAAAA25g0ztuXNEAAAAAAAAAAAAAAAAAAAAAAAAAAANqa
        NTDbmDT425g0/duYNyoAAAAA2pkzbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA25g0lNuYNP/cmDOfAAAAANuaNSvbmDT/25g0jf+AAALbmTXM25g049uX
        NIDflTUYAAAAANuZNJPbmDT/3Jc1kQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADbmTTW25g0/92aNTUAAAAA25g1iNuYNP/bmDT/3Jg1wtuY
        NP7bmDT/25g0/9uYNPnbmDSj3JgzbduYNP/bmDTUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuYNPTbmDT/4445Cf+AAALbmDTj25g0/9uY
        NP/bmDT/25g0/9uYNP/bmDT/25g0/9uYNP/bmDS525g0/9uYNPMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25g09duYNP/fnzAQ2po1RNuY
        NP/bmDT/25g0/9uYNP/bmDT/25g0/9uYNP/bmDT/25g08dmZMyjbmDT/25g09QAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADbmDTX25g0/9qZ
        MzfbmDSh25g0/9uYNP/bmDT/25g0/9uYNP/bmDT/25g0/9uYNP/bmTN425YyONuYNP/bmDPVAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuY
        M5XbmDT/25g0oduYNe7bmTNk25g03tuYNP/bmDT/25g0/9uYNP/bmDT/25g0/9uZMyPbmTST25g0/9uY
        NJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA3pYyLtuYNP7bmDT/2pg0tQAAAADbkiQH25k0cNqXNMrbmDT025g03dyZM1DbmTXM25g2OduY
        NPjbmDT+3ZkzLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA3Jg0l9uYNP/blzTl2Zg2LwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANqa
        NTDbmDPk25g0/9uXNZYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA25o1P9uYNMHbmDT125g0/9uYNP/bmDT52pg0ktuWMjjVlSsM0aIuC9qZ
        MzfamDSS25g0+NuYNP/bmDT/25g09tuXNMXcmDVIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANuZNGvbmDT725g0/9uYNP/bmDT/25g0/9uYNP3bmDT/25g0/9uY
        NP/bmDT/25g0/9uYNP/bmDT925g0/duYNP/bmDT/25g0/9uYNP3bmTN4AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+AQATblzWW25g0/9uYNP7amTSE2ZkzKNuYNP/blzTq3Zg3JdyY
        M5DbmDTS25g0/9uYNP/bmDTS3JgzkN2YNyXbmTTb25g0/9uYNjnbmTR625g0/duYNP/bmDSj359ACAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25g0stuYNP/bmDT32pkzWsyZMwXclzS725g0/9qZ
        NKcAAAAAAAAAAAAAAADbmDT/25g0/wAAAAAAAAAAAAAAANyYNJfbmDT/25g0xuOOOQnalzRT25g09duY
        NP/bmDW9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADclzVl25g0/9uYNO/clzQs25g0ntuY
        NP/bmDPk25s3HAAAAADblzTA3Jgz39uYNP/bmDT/3Jgz39uXNMAAAAAA2ZkzFNuZNNvbmDT/3Jg0rd2a
        NibbmDTr25g0/9yZM3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADamTSn25g0/9uY
        NPTbmDT/25g08tmYNi8AAAAAAAAAANuYNMHbmDTz25g0/9uYNP/bmDTz25g0wQAAAAAAAAAA3Zo2JtuY
        NOzbmDT/25g09NuYNP/bmDSy//8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOaZ
        MwrblzS225g0/9uYNPvcmjRJAAAAAAAAAAAAAAAAAAAAANuXNOXbmDT/25g0/9uYM+QAAAAAAAAAAAAA
        AAAAAAAA2ZYyPduYNPjbmDT/2pg0vNWVKwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANWqKwbbmDSc3Jc1ZQAAAAAAAAAAAAAAAAAAAAAAAAAA25g049uYNP/bmDT/25g04gAA
        AAAAAAAAAAAAAAAAAAAAAAAA2pg0WduZNKLbkiQHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADamTNL25gz5NuY
        NOPcmjRJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////n////APv/jAAx/4AAAP+AAAH/wcOD/8EAg//AAAP/wA
        AD/8geE//Qnwv/8QCP//EAD//wAA//8AAP//AAD//wAA//8IAP//h+H//gAAf/wAAD/wAAAP8A5wD/AI
        EA/4GBgP+Dw8H/x8Pj///D////////////8=
</value>
  </data>
</root>